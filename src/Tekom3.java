
import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.util.ArrayList;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Irhamfauzan
 */
public class Tekom3 extends javax.swing.JFrame {

    public String listtoken = "";
    public String input = "";
    public String number = "";
    public String variabel = "";
    public String token = "";
    public boolean status = false;
    public int i = 0;
    public ArrayList<String> output = new ArrayList<>();
    public Stack<String> stack = new Stack<>();
    public int countstack = 0;
    public int x=0;
    public char pointer;
    public char pointer2;

    public String Token(String token) {
        if (token == "variable") {
            return "1";
        } else if (token == "real") {
            return "2";
        } else if (token == "digit") {
            return "3";
        } else if (token == "(") {
            return "4";
        } else if (token == ")") {
            return "5";
        } else if (token == "+") {
            return "6";
        } else if (token == "-") {
            return "7";
        } else if (token == "*") {
            return "8";
        } else if (token == "/") {
            return "9";
        }
        return token;
    }

    public void q0(char x) {
        if (x == '(') {
            q1(x);
            token = "(";
        }
        if (x == ')') {
            q2(x);
            token = ")";
        }
        if (x == '+') {
            q3(x);
            token = "+";
        }
        if (x == '-') {
            q4(x);
            token = "-";
        }
        if (x == '/') {
            q5(x);
            token = "/";
        }
        if (x == '*') {
            q6(x);
            token = "*";
        }
        if (Character.isDigit(x)) {
            number += x;
            q8(x);
        }
        if (Character.isAlphabetic(x)) {
            variabel += x;
            q7(x);
            token = "variable";
        }
    }

    /**
     * Creates new form Tekom3
     */
    public Tekom3() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        field = new javax.swing.JTextField();
        check = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Layar = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        field2 = new javax.swing.JTextField();
        cekvalid = new javax.swing.JButton();
        field3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldActionPerformed(evt);
            }
        });

        check.setText("Check");
        check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Input");

        Layar.setColumns(20);
        Layar.setRows(5);
        jScrollPane2.setViewportView(Layar);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Arithmatic Expression Parser");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Token");

        field2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field2ActionPerformed(evt);
            }
        });

        cekvalid.setText("Check Validasi");
        cekvalid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cekvalidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(38, 38, 38)
                                .addComponent(field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                                .addComponent(check))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(field3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                    .addComponent(field2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cekvalid)))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(field, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(field2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(field3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                    .addComponent(cekvalid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
        // TODO add your handling code here:
        input = field.getText();
        q0(input.charAt(i));

        for (String value : output) {
            Layar.setText(Layar.getText() + "\n" + value);
            field2.setText(listtoken);
        };
    }//GEN-LAST:event_checkActionPerformed

    private void fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldActionPerformed

    private void field2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field2ActionPerformed
        // TODO add your handling code here:     
    }//GEN-LAST:event_field2ActionPerformed

    private void cekvalidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cekvalidActionPerformed
        stack.push("#");
        stack.push("S");     
        char[] charAt = field2.getText().toCharArray();
        for (i = 0; i < charAt.length; i++) {
            if (charAt[i] == '1' || charAt[i] == '2' || charAt[i] == '3') {
                charAt[i] = 'E';
            } else if (charAt[i] == '4') {
                charAt[i] = 'F';
            } else if (charAt[i] == '5') {
                charAt[i] = 'G';
            } else {
                charAt[i] = 'H';
            }
        }
        while (stack.peek() != "#") {
            countstack++;
            pointer = charAt[charAt.length - 1];
            if (countstack == 2 * (charAt.length) + 1) {
                break;
            }
            if (x != charAt.length) {
                pointer = charAt[x];
            }
            if (x + 1 >= charAt.length) {
                pointer2 = pointer;
            } else {
                pointer2 = charAt[x + 1];
            }
            if (x == charAt.length) {
                break;
            }
            switch (stack.peek()) {
                case "S":
                    if (pointer2 == 'H' && pointer == 'E') {
                        stack.pop();
                        stack.push("S");
                        stack.push("H");
                        stack.push("E");
                    } else if (pointer == 'F' && pointer2 == 'E') {
                        stack.pop();
                        stack.push("G");
                        stack.push("S");
                        stack.push("F");
                    } else if (pointer == 'E' && pointer2 != 'F') {
                        stack.pop();
                        stack.push("E");
                    }
                    break;
                case "E":
                    if (pointer == 'E') {
                        stack.pop();
                        x += 1;
                    }
                    break;
                case "F":
                    if (pointer == 'F') {
                        stack.pop();
                        x += 1;
                    }
                    break;
                case "G":
                    if (pointer == 'G') {
                        stack.pop();
                        x += 1;
                    }
                    break;
                case "H":
                    if (pointer == 'H') {
                        stack.pop();
                        x += 1;
                    }
                    break;
            }
        }
        if (stack.peek() == "#") {
            field3.setText("Valid");
            status = true;
        } else {
            field3.setText("Tidak Valid");
            status = false;
        }
        System.out.println(stack.toString());
    }//GEN-LAST:event_cekvalidActionPerformed

    /**
     * @param args the command line arguments
     */
    public void q1(char x) {
        token = "(";
        output.add(x + "" + " || Grouping Symbol || " + Token(token));
        listtoken += Token(token);
        i++;
        if (i != input.length()) {
            x = input.charAt(i);
            q0(x);
        }
    }

    public void q2(char x) {
        token = ")";
        output.add(x + "" + " || Grouping Symbol || " + Token(token));
        listtoken += Token(token);
        i++;
        if (i != input.length()) {
            x = input.charAt(i);
            q0(x);
        }
    }

    public void q3(char x) {
        token = "+";
        output.add(x + "" + " || Operator || " + Token(token));
        listtoken += Token(token);
        i++;

        if (i != input.length()) {
            x = input.charAt(i);
            q0(x);
        }
    }

    public void q4(char x) {
        token = "-";
        output.add(x + "" + " || Operator || " + Token(token));
        listtoken += Token(token);
        i++;
        if (i != input.length()) {
            x = input.charAt(i);
            q0(x);
        }
    }

    public void q5(char x) {
        token = "/";
        output.add(x + "" + " || Operator || " + Token(token));
        listtoken += Token(token);
        i++;
        if (i != input.length()) {
            x = input.charAt(i);
            q0(x);
        }
    }

    public void q6(char x) {
        token = "*";
        output.add(x + "" + " || Operator || " + Token(token));
        listtoken += Token(token);
        i++;
        if (i != input.length()) {
            x = input.charAt(i);
            q0(x);
        }
    }

    public void q7(char x) {
        i++;
        token = "variable";
        if (i == input.length()) {
            output.add(variabel + " || Operand || " + Token(token));
            listtoken += Token(token);
            variabel = "";
        } else {
            x = input.charAt(i);
            if (Character.isAlphabetic(x) || Character.isDigit(x)) {
                variabel += x;
                q7(x);
            } else if (x == '_') {
                variabel += x;
                q9(x);
            } else {
                output.add(variabel + " || Operand || " + Token(token));
                listtoken += Token(token);
                variabel = "";
                q0(x);
            }
        }
    }

    public void q8(char x) {
        i++;
        if (i == input.length()) {
            token = "digit";
            output.add(number + " || Operand || " + Token(token));
            listtoken += Token(token);
            number = "";
        } else {
            x = input.charAt(i);
            if (x == 'E' || x == 'e') {
                number += x;
                q10(x);
            } else if (x == ',' || x == '.') {
                number += x;
                q11(x);
            } else if (Character.isDigit(x)) {
                number += x;
                q8(x);
            } else {
                token = "digit";
                output.add(number + " || Operand || " + Token(token));
                listtoken += Token(token);
                number = "";
                q0(x);
            }
        }
    }

    public void q9(char x) {
        i++;
        x = input.charAt(i);
        if (Character.isAlphabetic(x) || Character.isDigit(x)) {
            variabel += x;
            q7(x);
        }
    }

    public void q10(char x) {
        i++;
        x = input.charAt(i);
        if (Character.isDigit(x)) {
            number += x;
            q13(x);
        } else if (x == '+' || x == '-') {
            number += x;
            q12(x);
        }
    }

    public void q11(char x) {
        i++;
        x = input.charAt(i);
        if (Character.isDigit(x)) {
            number += x;
            q14(x);
        }
    }

    public void q12(char x) {
        i++;
        x = input.charAt(i);
        if (Character.isDigit(x)) {
            number += x;
            q13(x);
        }
    }

    public void q13(char x) {
        i++;
        if (i == input.length()) {
            token = "real";
            output.add(number + " || Operand || " + Token(token));
            listtoken += Token(token);
            number = "";
        } else {
            x = input.charAt(i);
            if (Character.isDigit(x)) {
                number += x;
                q13(x);
            } else {
                token = "real";
                output.add(number + " || Operand || " + Token(token));
                listtoken += Token(token);
                number = "";
                q0(x);
            }
        }
    }

    public void q14(char x) {
        i++;

        if (i == input.length()) {
            token = "digit";
            output.add(number + "" + " || Operand || " + Token(token));
            listtoken += Token(token);
            number = "";
        } else {
            x = input.charAt(i);
            if (Character.isDigit(x)) {
                number += x;
                q14(x);
            } else if (x == 'E' || x == 'e') {
                number += x;
                q15(x);
            } else {
                token = "digit";
                output.add(number + "" + " || Operand || " + Token(token));
                listtoken += Token(token);
                number = "";
                q0(x);
            }
        }
    }

    public void q15(char x) {
        i++;
        x = input.charAt(i);
        if (x == '+' || x == '-') {
            number += x;
            q16(x);
        } else if (Character.isDigit(x)) { 
            number += x;
            q13(x);
        }
    }

    public void q16(char x) {
        i++;
        x = input.charAt(i);
        if (Character.isDigit(x)) {
            number += x;
            q13(x);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tekom3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tekom3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tekom3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tekom3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tekom3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Layar;
    private javax.swing.JButton cekvalid;
    private javax.swing.JButton check;
    private javax.swing.JTextField field;
    private javax.swing.JTextField field2;
    private javax.swing.JTextField field3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
